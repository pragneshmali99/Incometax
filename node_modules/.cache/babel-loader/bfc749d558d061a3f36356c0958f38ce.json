{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"/home/pragnesh/Smis/DemoExample/Gitincome/incometax/src/SpeechText.js\";\nimport React, { Component } from 'react'; //------------------------SPEECH RECOGNITION-----------------------------\n\nconst SpeechRecognition = typeof window !== 'undefined' && (window.SpeechRecognition || window.webkitSpeechRecognition);\nconst recognition = new SpeechRecognition();\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = 'hi-IN'; // en-US\n//------------------------COMPONENT-----------------------------\n\nclass Speech extends Component {\n  constructor() {\n    super();\n    this.state = {\n      listening: false\n    };\n    this.toggleListen = this.toggleListen.bind(this);\n    this.handleListen = this.handleListen.bind(this);\n  }\n\n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen);\n  }\n\n  componentDidMount() {\n    this.toggleListen();\n  }\n\n  handleListen() {\n    console.log('listening?', this.state.listening);\n\n    if (this.state.listening) {\n      recognition.start();\n\n      recognition.onend = () => {\n        console.log(\"...continue listening...\");\n        recognition.start();\n      };\n    } else {\n      recognition.stop();\n\n      recognition.onend = () => {\n        console.log(\"Stopped listening per click\");\n      };\n    }\n\n    recognition.onstart = () => {\n      console.log(\"Listening!\");\n    };\n\n    let finalTranscript = '';\n\n    recognition.onresult = event => {\n      // let interimTranscript = ''\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + ' '; // else interimTranscript += transcript;\n      } // document.getElementById('interim').innerHTML = interimTranscript\n\n\n      document.getElementById('final').innerHTML = finalTranscript; //-------------------------COMMANDS------------------------------------\n\n      const transcriptArr = finalTranscript.split(' ');\n      const stopCmd = transcriptArr.slice(-3, -1);\n      console.log('stopCmd', stopCmd);\n\n      if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening') {\n        recognition.stop();\n\n        recognition.onend = () => {\n          console.log('Stopped listening per command');\n          const finalText = transcriptArr.slice(0, -3).join(' ');\n          document.getElementById('final').innerHTML = finalText;\n        };\n      }\n    }; //-----------------------------------------------------------------------\n\n\n    recognition.onerror = event => {\n      console.log(\"Error occurred in recognition: \" + event.error);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"final\",\n      style: final,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Speech; //-------------------------CSS------------------------------------\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  button: {\n    width: '60px',\n    height: '60px',\n    background: 'lightblue',\n    borderRadius: '50%',\n    margin: '6em 0 2em 0'\n  },\n  // interim: {\n  //   color: 'gray',\n  //   border: '#ccc 1px solid',\n  //   padding: '1em',\n  //   margin: '1em',\n  //   width: '300px'\n  // },\n  final: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  }\n};\nconst container = styles.container,\n      button = styles.button,\n      final = styles.final; // const { container, button, interim, final } = styles","map":{"version":3,"sources":["/home/pragnesh/Smis/DemoExample/Gitincome/incometax/src/SpeechText.js"],"names":["React","Component","SpeechRecognition","window","webkitSpeechRecognition","recognition","continous","interimResults","lang","Speech","constructor","state","listening","toggleListen","bind","handleListen","setState","componentDidMount","console","log","start","onend","stop","onstart","finalTranscript","onresult","event","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","transcriptArr","split","stopCmd","slice","finalText","join","onerror","error","render","container","final","styles","display","flexDirection","alignItems","textAlign","button","width","height","background","borderRadius","margin","color","border","padding"],"mappings":"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","sourcesContent":["\r\n'use strict'\r\nimport React, { Component } from 'react';\r\n\r\n//------------------------SPEECH RECOGNITION-----------------------------\r\n\r\nconst SpeechRecognition = typeof window !== 'undefined' && ( window.SpeechRecognition || window.webkitSpeechRecognition )\r\nconst recognition = new SpeechRecognition()\r\n\r\nrecognition.continous = true\r\nrecognition.interimResults = true\r\nrecognition.lang = 'hi-IN'\r\n// en-US\r\n\r\n//------------------------COMPONENT-----------------------------\r\n\r\nclass Speech extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      listening: false\r\n    }\r\n    this.toggleListen = this.toggleListen.bind(this)\r\n    this.handleListen = this.handleListen.bind(this)\r\n  }\r\n\r\n \r\n\r\n  toggleListen() {\r\n    this.setState({\r\n      listening: !this.state.listening\r\n    }, this.handleListen)\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.toggleListen();\r\n  }\r\n\r\n  handleListen() {\r\n   \r\n    console.log('listening?', this.state.listening)\r\n\r\n    if (this.state.listening) {\r\n      recognition.start()\r\n      recognition.onend = () => {\r\n        console.log(\"...continue listening...\")\r\n        recognition.start()\r\n      }\r\n\r\n    } else {\r\n      recognition.stop()\r\n      recognition.onend = () => {\r\n        console.log(\"Stopped listening per click\")\r\n      }\r\n    }\r\n\r\n    recognition.onstart = () => {\r\n      console.log(\"Listening!\")\r\n    }\r\n\r\n    let finalTranscript = ''\r\n    recognition.onresult = event => {\r\n      // let interimTranscript = ''\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';\r\n        // else interimTranscript += transcript;\r\n      }\r\n      // document.getElementById('interim').innerHTML = interimTranscript\r\n      document.getElementById('final').innerHTML = finalTranscript\r\n\r\n    //-------------------------COMMANDS------------------------------------\r\n\r\n      const transcriptArr = finalTranscript.split(' ')\r\n      const stopCmd = transcriptArr.slice(-3, -1)\r\n      console.log('stopCmd', stopCmd)\r\n\r\n      if (stopCmd[0] === 'stop' && stopCmd[1] === 'listening'){\r\n        recognition.stop()\r\n        recognition.onend = () => {\r\n          console.log('Stopped listening per command')\r\n          const finalText = transcriptArr.slice(0, -3).join(' ')\r\n          document.getElementById('final').innerHTML = finalText\r\n        }\r\n      }\r\n    }\r\n    \r\n  //-----------------------------------------------------------------------\r\n    \r\n    recognition.onerror = event => {\r\n      console.log(\"Error occurred in recognition: \" + event.error)\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      \r\n      <div style={container} >\r\n        \r\n        {/* <button id='microphone-btn' style={button} onClick={this.toggleListen} /> */}\r\n        {/* <div id='interim' style={interim}></div> */}\r\n        {/* <div id='final' style={final} ></div> */}\r\n        <div id='final' style={final}></div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Speech;\r\n\r\n\r\n//-------------------------CSS------------------------------------\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    textAlign: 'center'\r\n  },\r\n  button: {\r\n    width: '60px',\r\n    height: '60px',\r\n    background: 'lightblue',\r\n    borderRadius: '50%',\r\n    margin: '6em 0 2em 0'\r\n  },\r\n  // interim: {\r\n  //   color: 'gray',\r\n  //   border: '#ccc 1px solid',\r\n  //   padding: '1em',\r\n  //   margin: '1em',\r\n  //   width: '300px'\r\n  // },\r\n  final: {\r\n    color: 'black',\r\n    border: '#ccc 1px solid',\r\n    padding: '1em',\r\n    margin: '1em',\r\n    width: '300px'\r\n  }\r\n}\r\n\r\nconst { container, button, final } = styles\r\n// const { container, button, interim, final } = styles\r\n\r\n"]},"metadata":{},"sourceType":"module"}